// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: routeguide/RouteGuideProto.proto
package routeguide;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * Not used in the RPC.  Instead, this is here for the form serialized to disk.
 */
public final class FeatureDatabase extends Message<FeatureDatabase, FeatureDatabase.Builder> {
  public static final ProtoAdapter<FeatureDatabase> ADAPTER = new ProtoAdapter_FeatureDatabase();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "routeguide.Feature#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Feature> feature;

  public FeatureDatabase(List<Feature> feature) {
    this(feature, ByteString.EMPTY);
  }

  public FeatureDatabase(List<Feature> feature, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.feature = Internal.immutableCopyOf("feature", feature);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.feature = Internal.copyOf("feature", feature);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof FeatureDatabase)) return false;
    FeatureDatabase o = (FeatureDatabase) other;
    return unknownFields().equals(o.unknownFields())
        && feature.equals(o.feature);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + feature.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!feature.isEmpty()) builder.append(", feature=").append(feature);
    return builder.replace(0, 2, "FeatureDatabase{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<FeatureDatabase, Builder> {
    public List<Feature> feature;

    public Builder() {
      feature = Internal.newMutableList();
    }

    public Builder feature(List<Feature> feature) {
      Internal.checkElementsNotNull(feature);
      this.feature = feature;
      return this;
    }

    @Override
    public FeatureDatabase build() {
      return new FeatureDatabase(feature, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_FeatureDatabase extends ProtoAdapter<FeatureDatabase> {
    public ProtoAdapter_FeatureDatabase() {
      super(FieldEncoding.LENGTH_DELIMITED, FeatureDatabase.class);
    }

    @Override
    public int encodedSize(FeatureDatabase value) {
      return Feature.ADAPTER.asRepeated().encodedSizeWithTag(1, value.feature)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, FeatureDatabase value) throws IOException {
      Feature.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.feature);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public FeatureDatabase decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.feature.add(Feature.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public FeatureDatabase redact(FeatureDatabase value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.feature, Feature.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
