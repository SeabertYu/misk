// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: routeguide/RouteGuideProto.proto
package routeguide;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * A RouteSummary is received in response to a RecordRoute rpc.
 *
 * It contains the number of individual points received, the number of
 * detected features, and the total distance covered as the cumulative sum of
 * the distance between each point.
 */
public final class RouteSummary extends Message<RouteSummary, RouteSummary.Builder> {
  public static final ProtoAdapter<RouteSummary> ADAPTER = new ProtoAdapter_RouteSummary();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_POINT_COUNT = 0;

  public static final Integer DEFAULT_FEATURE_COUNT = 0;

  public static final Integer DEFAULT_DISTANCE = 0;

  public static final Integer DEFAULT_ELAPSED_TIME = 0;

  /**
   * The number of points received.
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer point_count;

  /**
   * The number of known features passed while traversing the route.
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer feature_count;

  /**
   * The distance covered in metres.
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer distance;

  /**
   * The duration of the traversal in seconds.
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer elapsed_time;

  public RouteSummary(Integer point_count, Integer feature_count, Integer distance,
      Integer elapsed_time) {
    this(point_count, feature_count, distance, elapsed_time, ByteString.EMPTY);
  }

  public RouteSummary(Integer point_count, Integer feature_count, Integer distance,
      Integer elapsed_time, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.point_count = point_count;
    this.feature_count = feature_count;
    this.distance = distance;
    this.elapsed_time = elapsed_time;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.point_count = point_count;
    builder.feature_count = feature_count;
    builder.distance = distance;
    builder.elapsed_time = elapsed_time;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RouteSummary)) return false;
    RouteSummary o = (RouteSummary) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(point_count, o.point_count)
        && Internal.equals(feature_count, o.feature_count)
        && Internal.equals(distance, o.distance)
        && Internal.equals(elapsed_time, o.elapsed_time);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (point_count != null ? point_count.hashCode() : 0);
      result = result * 37 + (feature_count != null ? feature_count.hashCode() : 0);
      result = result * 37 + (distance != null ? distance.hashCode() : 0);
      result = result * 37 + (elapsed_time != null ? elapsed_time.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (point_count != null) builder.append(", point_count=").append(point_count);
    if (feature_count != null) builder.append(", feature_count=").append(feature_count);
    if (distance != null) builder.append(", distance=").append(distance);
    if (elapsed_time != null) builder.append(", elapsed_time=").append(elapsed_time);
    return builder.replace(0, 2, "RouteSummary{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<RouteSummary, Builder> {
    public Integer point_count;

    public Integer feature_count;

    public Integer distance;

    public Integer elapsed_time;

    public Builder() {
    }

    /**
     * The number of points received.
     */
    public Builder point_count(Integer point_count) {
      this.point_count = point_count;
      return this;
    }

    /**
     * The number of known features passed while traversing the route.
     */
    public Builder feature_count(Integer feature_count) {
      this.feature_count = feature_count;
      return this;
    }

    /**
     * The distance covered in metres.
     */
    public Builder distance(Integer distance) {
      this.distance = distance;
      return this;
    }

    /**
     * The duration of the traversal in seconds.
     */
    public Builder elapsed_time(Integer elapsed_time) {
      this.elapsed_time = elapsed_time;
      return this;
    }

    @Override
    public RouteSummary build() {
      return new RouteSummary(point_count, feature_count, distance, elapsed_time, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RouteSummary extends ProtoAdapter<RouteSummary> {
    public ProtoAdapter_RouteSummary() {
      super(FieldEncoding.LENGTH_DELIMITED, RouteSummary.class);
    }

    @Override
    public int encodedSize(RouteSummary value) {
      return ProtoAdapter.INT32.encodedSizeWithTag(1, value.point_count)
          + ProtoAdapter.INT32.encodedSizeWithTag(2, value.feature_count)
          + ProtoAdapter.INT32.encodedSizeWithTag(3, value.distance)
          + ProtoAdapter.INT32.encodedSizeWithTag(4, value.elapsed_time)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RouteSummary value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 1, value.point_count);
      ProtoAdapter.INT32.encodeWithTag(writer, 2, value.feature_count);
      ProtoAdapter.INT32.encodeWithTag(writer, 3, value.distance);
      ProtoAdapter.INT32.encodeWithTag(writer, 4, value.elapsed_time);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RouteSummary decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.point_count(ProtoAdapter.INT32.decode(reader)); break;
          case 2: builder.feature_count(ProtoAdapter.INT32.decode(reader)); break;
          case 3: builder.distance(ProtoAdapter.INT32.decode(reader)); break;
          case 4: builder.elapsed_time(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RouteSummary redact(RouteSummary value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
