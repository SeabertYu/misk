// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: routeguide/RouteGuideProto.proto
package routeguide;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * A RouteNote is a message sent while at a given point.
 */
public final class RouteNote extends Message<RouteNote, RouteNote.Builder> {
  public static final ProtoAdapter<RouteNote> ADAPTER = new ProtoAdapter_RouteNote();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_MESSAGE = "";

  /**
   * The location from which the message is sent.
   */
  @WireField(
      tag = 1,
      adapter = "routeguide.Point#ADAPTER"
  )
  public final Point location;

  /**
   * The message to be sent.
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String message;

  public RouteNote(Point location, String message) {
    this(location, message, ByteString.EMPTY);
  }

  public RouteNote(Point location, String message, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.location = location;
    this.message = message;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.location = location;
    builder.message = message;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RouteNote)) return false;
    RouteNote o = (RouteNote) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(location, o.location)
        && Internal.equals(message, o.message);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (location != null ? location.hashCode() : 0);
      result = result * 37 + (message != null ? message.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (location != null) builder.append(", location=").append(location);
    if (message != null) builder.append(", message=").append(message);
    return builder.replace(0, 2, "RouteNote{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<RouteNote, Builder> {
    public Point location;

    public String message;

    public Builder() {
    }

    /**
     * The location from which the message is sent.
     */
    public Builder location(Point location) {
      this.location = location;
      return this;
    }

    /**
     * The message to be sent.
     */
    public Builder message(String message) {
      this.message = message;
      return this;
    }

    @Override
    public RouteNote build() {
      return new RouteNote(location, message, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RouteNote extends ProtoAdapter<RouteNote> {
    public ProtoAdapter_RouteNote() {
      super(FieldEncoding.LENGTH_DELIMITED, RouteNote.class);
    }

    @Override
    public int encodedSize(RouteNote value) {
      return Point.ADAPTER.encodedSizeWithTag(1, value.location)
          + ProtoAdapter.STRING.encodedSizeWithTag(2, value.message)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RouteNote value) throws IOException {
      Point.ADAPTER.encodeWithTag(writer, 1, value.location);
      ProtoAdapter.STRING.encodeWithTag(writer, 2, value.message);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RouteNote decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.location(Point.ADAPTER.decode(reader)); break;
          case 2: builder.message(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RouteNote redact(RouteNote value) {
      Builder builder = value.newBuilder();
      if (builder.location != null) builder.location = Point.ADAPTER.redact(builder.location);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
