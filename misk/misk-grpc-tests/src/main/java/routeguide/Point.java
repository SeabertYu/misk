// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: routeguide/RouteGuideProto.proto
package routeguide;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * Points are represented as latitude-longitude pairs in the E7 representation
 * (degrees multiplied by 10**7 and rounded to the nearest integer).
 * Latitudes should be in the range +/- 90 degrees and longitude should be in
 * the range +/- 180 degrees (inclusive).
 */
public final class Point extends Message<Point, Point.Builder> {
  public static final ProtoAdapter<Point> ADAPTER = new ProtoAdapter_Point();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_LATITUDE = 0;

  public static final Integer DEFAULT_LONGITUDE = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer latitude;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer longitude;

  public Point(Integer latitude, Integer longitude) {
    this(latitude, longitude, ByteString.EMPTY);
  }

  public Point(Integer latitude, Integer longitude, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.latitude = latitude;
    this.longitude = longitude;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.latitude = latitude;
    builder.longitude = longitude;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Point)) return false;
    Point o = (Point) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(latitude, o.latitude)
        && Internal.equals(longitude, o.longitude);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (latitude != null ? latitude.hashCode() : 0);
      result = result * 37 + (longitude != null ? longitude.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (latitude != null) builder.append(", latitude=").append(latitude);
    if (longitude != null) builder.append(", longitude=").append(longitude);
    return builder.replace(0, 2, "Point{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Point, Builder> {
    public Integer latitude;

    public Integer longitude;

    public Builder() {
    }

    public Builder latitude(Integer latitude) {
      this.latitude = latitude;
      return this;
    }

    public Builder longitude(Integer longitude) {
      this.longitude = longitude;
      return this;
    }

    @Override
    public Point build() {
      return new Point(latitude, longitude, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Point extends ProtoAdapter<Point> {
    public ProtoAdapter_Point() {
      super(FieldEncoding.LENGTH_DELIMITED, Point.class);
    }

    @Override
    public int encodedSize(Point value) {
      return ProtoAdapter.INT32.encodedSizeWithTag(1, value.latitude)
          + ProtoAdapter.INT32.encodedSizeWithTag(2, value.longitude)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Point value) throws IOException {
      ProtoAdapter.INT32.encodeWithTag(writer, 1, value.latitude);
      ProtoAdapter.INT32.encodeWithTag(writer, 2, value.longitude);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Point decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.latitude(ProtoAdapter.INT32.decode(reader)); break;
          case 2: builder.longitude(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Point redact(Point value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
