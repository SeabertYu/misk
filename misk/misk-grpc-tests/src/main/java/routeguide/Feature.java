// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: routeguide/RouteGuideProto.proto
package routeguide;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * A feature names something at a given point.
 *
 * If a feature could not be named, the name is empty.
 */
public final class Feature extends Message<Feature, Feature.Builder> {
  public static final ProtoAdapter<Feature> ADAPTER = new ProtoAdapter_Feature();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_NAME = "";

  /**
   * The name of the feature.
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String name;

  /**
   * The point where the feature is detected.
   */
  @WireField(
      tag = 2,
      adapter = "routeguide.Point#ADAPTER"
  )
  public final Point location;

  public Feature(String name, Point location) {
    this(name, location, ByteString.EMPTY);
  }

  public Feature(String name, Point location, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.name = name;
    this.location = location;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.name = name;
    builder.location = location;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Feature)) return false;
    Feature o = (Feature) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(name, o.name)
        && Internal.equals(location, o.location);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (location != null ? location.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (name != null) builder.append(", name=").append(name);
    if (location != null) builder.append(", location=").append(location);
    return builder.replace(0, 2, "Feature{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Feature, Builder> {
    public String name;

    public Point location;

    public Builder() {
    }

    /**
     * The name of the feature.
     */
    public Builder name(String name) {
      this.name = name;
      return this;
    }

    /**
     * The point where the feature is detected.
     */
    public Builder location(Point location) {
      this.location = location;
      return this;
    }

    @Override
    public Feature build() {
      return new Feature(name, location, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Feature extends ProtoAdapter<Feature> {
    public ProtoAdapter_Feature() {
      super(FieldEncoding.LENGTH_DELIMITED, Feature.class);
    }

    @Override
    public int encodedSize(Feature value) {
      return ProtoAdapter.STRING.encodedSizeWithTag(1, value.name)
          + Point.ADAPTER.encodedSizeWithTag(2, value.location)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Feature value) throws IOException {
      ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name);
      Point.ADAPTER.encodeWithTag(writer, 2, value.location);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Feature decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.location(Point.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Feature redact(Feature value) {
      Builder builder = value.newBuilder();
      if (builder.location != null) builder.location = Point.ADAPTER.redact(builder.location);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
